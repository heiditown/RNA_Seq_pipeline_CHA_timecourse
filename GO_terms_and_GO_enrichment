
##Aim: Finding GO terms and doing GO enrichment for each of the three thresholds, p-adj 0.05,0.01, 0.001 
##Scripts adapted from scripts provided by Philippa Borrill : NAM_RNAi_Senescence/scripts/03_WT_vs_RNAi_DESeq2_goseq.R


DE_genes <- data.frame(timepoint=numeric(),
                       DE_genes_0.05= numeric(), upreg_0.05= numeric(), downreg_0.05 = numeric(),
                       DE_genes_0.01= numeric (), upreg_0.01 = numeric(), downreg_0.01 = numeric (), 
                       DE_genes_0.001 = numeric (), upreg_0.001 = numeric (), downreg_0.001 = numeric ())
DE_genes

for (i in times_list) {
  head(get(paste("T",i,"CHA_vs_WT_.na.rm", sep="")))
  my_data <- get(paste("T",i,"CHA_vs_WT_.na.rm", sep=""))
  head(my_data)
  DE_genes_0.05 <- nrow(my_data)
  upreg_0.05 <- nrow(my_data[my_data$log2FoldChange > 1,])
  downreg_0.05 <- nrow(my_data[my_data$log2FoldChange < -1,])
  DE_genes_0.01 <- nrow(my_data[my_data$padj < 0.01,])
  upreg_0.01 <- nrow(my_data[my_data$padj < 0.01 & my_data$log2FoldChange > 1,])
  downreg_0.01 <- nrow(my_data[my_data$padj < 0.01 & my_data$log2FoldChange < -1,])
  DE_genes_0.001 <- nrow(my_data[my_data$padj < 0.001,])
  upreg_0.001 <- nrow(my_data[my_data$padj < 0.001 & my_data$log2FoldChange > 1,])
  downreg_0.001 <- nrow(my_data[my_data$padj < 0.001 & my_data$log2FoldChange < -1,])
  
  DE_genes <- rbind(DE_genes, list(timepoint = as.numeric(i),
                                   DE_genes_0.05 = DE_genes_0.05, upreg_0.05 = upreg_0.05, downreg_0.05 = downreg_0.05,
                                   DE_genes_0.01 = DE_genes_0.01, upreg_0.01 = upreg_0.01, downreg_0.01 = downreg_0.01,
                                   DE_genes_0.001 = DE_genes_0.001, upreg_0.001 = upreg_0.001, downreg_0.001 = downreg_0.001))
  
}
DE_genes

colnames(DE_genes) <- c("timepoint","DE_genes_0.05","upreg2fold_0.05","downreg2fold_0.05",
                       "DE_genes_0.01","upreg2fold_0.01","downreg2fold_0.01",
                       "DE_genes_0.001","upreg2fold_0.001","downreg2fold_0.001")
DE_genes


DE_genes_long <- gather(DE_genes,"threshold","DE_genes",2:10)
DE_genes_long



#GO term enrichment for each timepoint for all three thresholds 

#read in information about lengths and GO terms 
getwd()

all_go <- read.csv("IWGSC_stress_GO.csv", sep=",")
head(all_go)
all_go <- all_go[,c(1,2)]
colnames(all_go) <- c("Gene","GO_term")
head(all_go)
dim(all_go)

#convert GO terms from V1.0 to V1.1

head(gsub("01G","02G", all_go$Gene))

all_go$Gene <- (gsub("01G","02G", all_go$Gene))
head(all_go)
dim(all_go)

all_go_HC <- all_go[!grepl("LC", all_go$Gene),]
head(all_go_HC)
dim(all_go_HC)

length(unique(all_go_HC$Gene)) #Number of HC genes with GO terms before removing the ones which don't match v1.0 to v1.1


#only keep genes which were 99% ID > 90% coverage from v1.0 to v1.1

genes_to_transfer <-read.csv(file="genes_to_transfer_qcov90_pident99_same_ID.csv")
head(genes_to_transfer)

all_go <- all_go[all_go$Gene %in% genes_to_transfer$gene_v1.1,]
head(all_go)
dim(all_go)

length(unique(all_go$Gene)) #number of genes with GO terms 

#select only genes used for DESeq2
head(counts_for_DESeq2)
dim(counts_for_DESeq2)

all_go <-subset(all_go, Gene %in% rownames(counts_for_DESeq2))
dim(all_go)

#create vector for gene_lengths 

# need to get lengths of genes not of transcripts 

lengths <- read.csv(file=paste0(data_dir,"control_timecourse_gene_lengths.csv"), header=T)

head(lengths)

colnames(lengths) <- c("gene","length")
head(lengths)

t1 <- subset(lengths, gene %in% rownames(counts_for_DESeq2))
head(t1)
dim(t1)


#turn into a vector called gene.lens to use with GOSeq

gene.lens <- as.numeric(t1$length)
names(gene.lens) = t1$gene
head(gene.lens)
length(gene.lens)

#do GO term enrichment

out_dir <- "GO_enrichment\\"

assayed.genes <- as.vector(t1$gene)
length(assayed.genes)

library(goseq)
i=1

GO_enriched <- data.frame(category = character(),over_represented_pvalue = numeric(),
                          under_represented_pvalue = numeric(), numDEInCat = numeric(),
                          numInCat = numeric(), term = character(), ontology = character(),
                          over_rep_padj = numeric(), timepoint_threshold = character())

head(GO_enriched)

#do the GO term enrichment for each timepoint 

for (i in times_list) {
  head(get(paste("T",i,"CHA_vs_WT_.na.rm",sep = "")))
  my_data <- get(paste("T",i,"CHA_vs_WT_.na.rm",sep =""))
  head(my_data)
  upreg2fold_0.05 <-(my_data[my_data$padj < 0.05 & my_data$log2FoldChange > 1,])
  downreg2fold_0.05 <- (my_data[my_data$padj <0.05 & my_data$log2FoldChange < -1,])
  upreg2fold_0.01 <- (my_data[my_data$padj < 0.01 & my_data$log2FoldChange > 1,])
  downreg2fold_0.01 <- (my_data[my_data$padj < 0.01 & my_data$log2FoldChange < -1,])
  upreg2fold_0.001 <- (my_data[my_data$padj < 0.001 & my_data$log2FoldChange > 1,])
  downreg2fold_0.001 <- (my_data[my_data$padj < 0.001 & my_data$log2FoldChange < -1,])
  
for (j in c("upreg2fold_0.01","downreg2fold_0.01","upreg2fold_0.001","downreg2fold_0.001")){
  genes_for_GO <-(get(j))
  
  #now do GO stat analysis on genes expressed in each pattern compared to all genes expressed 
  #create a named binary vector for genes where 1 means differencially expressed and 0 means not differentially expressed
  de.genes <- rownames(genes_for_GO)
  gene.vector=as.integer(assayed.genes%in%de.genes)
  names(gene.vector)=assayed.genes
  head(gene.vector)
  
  #now carry out GOseq analysis
  pwf = nullp(gene.vector, bias.data = gene.lens, plot.fit = TRUE)
  GO.wall = goseq(pwf, gene2cat = all_go)
  
  #this will give a table with p-values now need to correct for multiple testing using FDR
  enriched.GO=GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method="BH")<.05]
  head(enriched.GO)
  #add new column with over adjusted GO terms padj 
  
  GO.wall$over_rep_padj=p.adjust(GO.wall$over_represented_pvalue, method = "BH")
  write.table(GO.wall[GO.wall$over_rep_padj <0.05,], file = paste0(out_dir,i,"DESeq_CHA_vs_WT_",j,"_GOseq.tsv", sep = ""), sep= "\t", quote = FALSE, col.names = TRUE, row.names = F)
  
  GO_enriched_timepoint <- GO.wall[GO.wall$over_rep_padj <0.05 & GO.wall$ontology =="BP",]
  head(GO_enriched_timepoint)
  
  #if no enriched GO temrs dont; add to data frame 
  if(nrow(GO_enriched_timepoint)>0) {
    GO_enriched_timepoint$timepoint_threshold <- paste0(i,"DESeq_",j)
    GO_enriched <-rbind(GO_enriched,GO_enriched_timepoint)
  }
  
  
  
  
  
  
  
}
}

warnings()
getwd()
head(GO_enriched)

library(dplyr)

#need to add new column saying g01, g02 etc for each pattern 
#GO_enriched$rank=unlist(with(GO_enriched,tapply(over_rep_padj,pattern, rank)))

GO_enriched_ranked <- GO_enriched %>%
  group_by(timepoint_threshold) %>%
mutate(subrank = rank(over_rep_padj,ties.method = "first"))

GO_enriched_ranked
# check rank worked 
head(data.frame(GO_enriched_ranked))
colnames(GO_enriched_ranked)

# select columns want to spread
GO_enriched_sel <- as.data.frame(GO_enriched_ranked[,c(6,9,10)])
head(GO_enriched_sel)

library(tidyr)
GO_data_spread <- spread(GO_enriched_sel, subrank, term)
GO_data_spread[1:5,1:5]

dim(GO_data_spread)
unique(GO_data_spread$timepoint_threshold)

#want to add number of genes in each Differentially expressed group and grouped without Biological processes (BP) GO terms enriched 
head(DE_genes_long)
tails(DE_genes_long)

DE_genes_long

#select only DE 2 fold padj 0.05, 0.01 and 0.001
#make a new column with "timepoint threshold" to allow for merging - should match "timepoint threshold in GO_data_spread

DE_genes_long_categories <- DE_genes_long %>% 
  filter(threshold =="downreg2fold_0.001"|
           threshold =="upreg2fold_0.001"|
           threshold == "upreg2fold_0.01"|
           threshold =="downreg2fold_0.01"|
           threshold =="upreg2fold_0.05"|
           threshold =="downreg2fold_0.05") %>%
  mutate(timepoint_threshold = paste0(timepoint,"DESeq_",threshold))

head(DE_genes_long_categories)

DE_genes_long_categories

GO_data_spread[1:5,1:5]
merged_GO_data_spread <- merge(DE_genes_long_categories,GO_data_spread, by ="timepoint_threshold", all.x =T)
merged_GO_data_spread[1:10,1:5]

dim(merged_GO_data_spread)
unique(merged_GO_data_spread$timepoint_threshold)

#sort by timepoint 

merged_GO_data_spread <- merged_GO_data_spread[order(merged_GO_data_spread$timepoint),]
merged_GO_data_spread[1:10,1:5]


#rename value column to num_DE_genes 
colnames(merged_GO_data_spread)[1:10]
colnames(merged_GO_data_spread)[4] <- "num_DE_genes"

#seperate into 0.05,0.01 and 0.001 
merged_GO_data_spread_0.05 <- merged_GO_data_spread %>%
  filter(threshold =="upreg2fold_0.05"|
           threshold =="downreg2fold_0.05")
merged_GO_data_spread_0.05[1:10,1:5]

merged_GO_data_spread_0.01 <- merged_GO_data_spread %>%
  filter(threshold =="upreg2fold_0.01"|
           threshold =="downreg2fold_0.01")
merged_GO_data_spread_0.01[1:10,1:5]

merged_GO_data_spread_0.001 <- merged_GO_data_spread %>%
  filter(threshold =="upreg2fold_0.001"|
           threshold =="downreg2fold_0.001")
merged_GO_data_spread_0.001[1:10,1:5]

write.csv(file=paste0(out_dir,"GO_enrichment_padj0.05.csv"),
          merged_GO_data_spread_0.05, row.names = F)

write.csv(file=paste0(out_dir,"GO_enriched_padj0.01.csv"),
          merged_GO_data_spread_0.01, row.names = F)

write.csv(file=paste0(out_dir,"GO_enriched_padj0.001.csv"),
          merged_GO_data_spread_0.001, row.names =F)
